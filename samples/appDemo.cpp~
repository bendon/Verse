#include <iostream>
#include <Core/EventDispatcher.h>
#include <Core/DisplayObject.h>
#include <Core/Callback.h>
#include <Events/Event.h>
#include <UI/Button.h>

#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

using namespace std;

class MyApp: public Core::DisplayObject{
	public:
		MyApp(){
						
		}
		
		void init(){
			//Define our events
			myCallBack.SetCallback(this, &MyApp::onClick);
			addEventListener("click", &myCallBack);

			//Init Button
			b.x=0.1;
			b.y=0.1;
			b.width=0.5;
			b.height=0.3;

			addChild(&b);
		}			
			

		void onClick(Events::Event e){
			cout << "Event fired\n";
			cout << "Event type: " << e.type << "\n";
		}
		
		void run(){
			//Create event
			Events::Event e;
			e.type="click";
			dispatchEvent(e);			
			
		}

	private:
		Core::TCallback<MyApp> myCallBack;
		UI::Button b;	
};

MyApp app;

void renderScene(void) {
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	app.render();
	glutSwapBuffers();
}



int main (int argc, char **argv)
{
	cout << "OpenGL-GLUT Sample Basic APP\n";

	
	app.init();
	
	// init GLUT and create Window
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);
	glutInitWindowPosition(100,100);
	glutInitWindowSize(320,320);
	glutCreateWindow("OpenGL-GLUT Sample Basic APP");
	
	
	glutDisplayFunc(renderScene);

	// enter GLUT event processing cycle
	glutMainLoop();

	return 0;
}
